name: CI Pipeline
on:
  push:
    branches:
      - master

jobs:
  test-and-build:
    name: Test and Build iOS App
    runs-on: self-hosted
    environment:
      name: TEST_ENV

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Force the use of a specific Xcode version
      - name: Select Xcode Version
        run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer

      # Step 3: List Schemes
      - name: List Schemes
        run: xcodebuild -workspace Calculator.xcworkspace -list

      # Step 4: Testing Swift package
      - name: Test Swift Package
        run: |
          chmod +x .github/scripts/test-swift.sh
          sh .github/scripts/test-swift.sh

      # Step 5: Install xcpretty (for better test output formatting)
      - name: Install xcpretty
        run: sudo gem install xcpretty

      # Step 6: Testing iOS app
      - name: Test iOS App
        run: |
          chmod +x .github/scripts/test-app.sh
          sh .github/scripts/test-app.sh

      # Step 7: Build the app
      - name: Build the iOS app
        run: |
          xcodebuild \
            -workspace Calculator.xcworkspace \
            -scheme "Calculator iOS" \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro' \
            clean build | xcpretty

      # Step 8: Debug DerivedData Directory
      - name: Debug DerivedData Directory
        run: |
          echo "Contents of DerivedData directory:"
          ls -l ~/Library/Developer/Xcode/DerivedData

      # Step 9: Debug Build Products Directory
      - name: Debug Build Products Directory
        run: |
          echo "Contents of DerivedData build products directory:"
          ls -l ~/Library/Developer/Xcode/DerivedData/Calculator-*/Build/Products/Debug-iphonesimulator

      # Step 10: Verify Bundle Identifier
      - name: Verify Bundle Identifier
        run: |
          echo "Verifying bundle identifier in Info.plist:"
          /usr/libexec/PlistBuddy -c "Print CFBundleIdentifier" ~/Library/Developer/Xcode/DerivedData/Calculator-*/Build/Products/Debug-iphonesimulator/Calculator.app/Info.plist

      # Step 11: Run the app in iOS Simulator
      - name: Run app in iOS Simulator
        run: |
          DEVICE_NAME="iPhone 16 Pro"
          if [ -z "$BOOTED" ]; then
          echo "Device not booted. Booting $DEVICE_NAME..."
          xcrun simctl boot "$DEVICE_NAME"
          else
          echo "$DEVICE_NAME is already booted."
          fi
          xcrun simctl install booted ~/Library/Developer/Xcode/DerivedData/Calculator-*/Build/Products/Debug-iphonesimulator/Calculator.app
          xcrun simctl launch booted ABC.Calculator

      # Step 12: List Installed Apps on the Simulator
      - name: List Installed Apps on Simulator
        run: |
          echo "Listing installed apps on the simulator:"
          xcrun simctl get_app_container booted ABC.Calculator
